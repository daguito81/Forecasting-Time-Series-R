a <- c(1,2,3,4,5,6,7,8,9,10)
library(forecast)
library(fBasics)
diff(a)
log(a)
diff(log(a))
plot(a)
plot(a, type='l')
plot(diff(a), type='l')
plot(diff(log(a)), type='l')
library(caret)
install.packages("leaps")
library(MASS)
data("swiss")
case = action
)
switch (object,
case = action
)
swiss
full_model <- lm(Fertility ~ ., data = swiss)
print(full_model)
full_model$residuals
step_model <- stepAIC(full_model, direction = 'both', trace = F)
summary(step_model)
summary(full_model)
summary(step_model)
setwd("C:/Users/Dagoberto/Google Drive/Masters/IE MBD/Term 2/Forecasting Time Series/Homework/HW1")
read.csv("Homework_1_DATA.csv")
read.csv("Homework_1_DATA.csv", sep = ';', dec = ',')
data <- read.csv("Homework_1_DATA.csv", sep = ';', dec = ',')
head(data)
taile(data)
tail(data)
data[190:210,]
is.na(data)
count(is.na(data))
sum(is.na(data))
sum(is.na(data$Series.1))
sum(is.na(data$Series.2))
sum(is.na(data$Series.3))
sum(is.na(data$Series.4))
sum(is.na(data$Series.5))
sum(is.na(data$Series.6))
sum(is.na(data$Series.7))
sum(is.na(data$Series.8))
series1 <- data[1:300,1]
series5 <- data[1:2000,5]
series1 <- data[1:300,1]
series2 <- data[1:300,2]
series3 <- data[1:300,3]
series4 <- data[1:300,4]
series5 <- data[1:2000,5]
series6 <- data[1:3000,5]
series7 <- data[1:3000,5]
series <- c(series1, series2, series3, series4, series5, series6, series7)
for (i in series){
sum(is.na(i))
}
sum(is.na(series1))
series <- list(series1, series2, series3, series4, series5, series6, series7)
for (i in series){
print(sum(is.na(i)))
}
sum(is.na(data$Series.6))
sum(is.na(data$Series.7))
series1 <- data[1:300,1]
series2 <- data[1:300,2]
series3 <- data[1:300,3]
series4 <- data[1:300,4]
series5 <- data[1:2000,5]
series6 <- data[1:3000,6]
series7 <- data[1:3000,7]
series <- list(series1, series2, series3, series4, series5, series6, series7)
for (i in series){
print(sum(is.na(i)))
}
par(mar=c(1,1,1,1))
y <- series1
par(mfrow=c(3,1))
ts.plot(y)
acf(y)
pacf(y)
par(mfrow=c(3,1))
ts.plot(y)
acf(y)
pacf(y)
print("Graphical Representation:")
par(mfrow=c(1,1))
hist(y,prob=T,ylim=c(0,0.6),xlim=c(mean(y)-3*sd(y),mean(y)+3*sd(y)),col="red")
lines(density(y),lwd=2)
mu<-mean(y)
sigma<-sd(y)
x<-seq(mu-3*sigma,mu+3*sigma,length=100)
yy<-dnorm(x,mu,sigma)
lines(x,yy,lwd=2,col="blue")
print("Stat Values:")
print(paste("Mean: ", mean(y)))
print(paste("SD: ", sd(y)))
print(paste("Skewness: ", skewness(y)))
a <- kurtosis(y, method = c("moment"))[1]
print(paste("Kurtosis: ", kurtosis(y, method = c("moment"))[1]))
library(fBasics)
library(forecast)
print("Stat Values:")
print(paste("Mean: ", mean(y)))
print(paste("SD: ", sd(y)))
print(paste("Skewness: ", skewness(y)))
a <- kurtosis(y, method = c("moment"))[1]
print(paste("Kurtosis: ", kurtosis(y, method = c("moment"))[1]))
#### Stationary Check ####
d <- ndiffs(y, alpha=0.05, test=c("adf"))
d
#### Normality Check ####
shtest <- shapiro.test(y)
shtest
#### Normality Check ####
shtest <- shapiro.test(y)
shtest
#### White Noise Check ####
box <- Box.test(y, lag = 20, type="Ljung")
box
source('C:/Users/Dagoberto/Google Drive/Masters/IE MBD/Term 2/Forecasting Time Series/Homework/HW1/HW test1.R', echo=TRUE)
#### Set Up ####
par(mar=c(1,1,1,1))
y <- series2
#### Plots ####
print("TS Plots")
par(mfrow=c(3,1))
ts.plot(y)
acf(y)
pacf(y)
par(mfrow=c(3,1))
ts.plot(y)
acf(y)
pacf(y)
ts.plot(y)
acf(y)
pacf(y)
par(mfrow=c(3,1))
ts.plot(y)
acf(y)
pacf(y)
par(mfrow=c(3,1))
ts.plot(y)
acf(y)
pacf(y)
print(paste("Min: ", min(y)))
print(paste("Mean: ", mean(y)))
print(paste("SD: ", sd(y)))
par(mfrow=c(1,1))
hist(y,prob=T,ylim=c(0,0.6),xlim=c(mean(y)-3*sd(y),mean(y)+3*sd(y)),col="red")
lines(density(y),lwd=2)
mu<-mean(y)
sigma<-sd(y)
x<-seq(mu-3*sigma,mu+3*sigma,length=100)
yy<-dnorm(x,mu,sigma)
lines(x,yy,lwd=2,col="blue")
ndiffs(y, alpha=0.05, test=c("adf"))
z <- diff(log(y)
)
y <- series2
z <- diff(log(y))
y <- series2
z <- diff(y)
dev.off()
library(fBasics)
library(forecast)
data <- read.csv("Homework_1_DATA.csv", sep = ';', dec = ',')
series1 <- data[1:300,1]
series2 <- data[1:300,2]
series3 <- data[1:300,3]
series4 <- data[1:300,4]
series5 <- data[1:2000,5]
series6 <- data[1:3000,6]
series7 <- data[1:3000,7]
series <- list(series1, series2, series3, series4, series5, series6, series7)
# Checking for NA Values
for (i in series){
print(sum(is.na(i)))
}
#### Set Up ####
par(mar=c(1,1,1,1))
y <- series2
z <- diff(y)
par(mfrow=c(3,1))
ts.plot(y)
acf(y)
pacf(y)
par(mfrow=c(3,1))
ts.plot(y)
acf(y)
pacf(y)
#### Stats ####
print("Stat Values:")
print(paste("Min: ", min(y)))
print(paste("Mean: ", mean(y)))
print(paste("SD: ", sd(y)))
length(y)
#Hyp Test for mean (Two tailed test with Known Variance)
# z = (xbar - mu0) / (sigma / sqrt(n))
z <- (mean(y) - 0) / ( sd(y) / sqrt(length(y)))
z
alpha <- 0.05
alpha <- 0.05
z.half.alpha <- qnorm(1-alpha/2)
c(-z.half.alpha, z.half.alpha)
if(z > -z.half.alpha && z < z.half.alpha) {
print("We cannot reject the Null Hyp, Mean is 0")
}
#### Set Up ####
par(mar=c(1,1,1,1))
y <- series1
#### Plots ####
print("TS Plots")
par(mfrow=c(3,1))
ts.plot(y)
acf(y)
pacf(y)
print(paste("Min: ", min(y)))
print(paste("Mean: ", mean(y)))
print(paste("SD: ", sd(y)))
print(paste("Skewness: ", skewness(y)))
a <- kurtosis(y, method = c("moment"))[1]
print(paste("Kurtosis: ", kurtosis(y, method = c("moment"))[1]))
z <- (mean(y) - 0) / ( sd(y) / sqrt(length(y)))
alpha <- 0.05
z.half.alpha <- qnorm(1-alpha/2)
c(-z.half.alpha, z.half.alpha)
if(z > -z.half.alpha && z < z.half.alpha) {
print("We cannot reject the Null Hyp, Mean is 0")
}
z
c(-z.half.alpha, z.half.alpha)
pval <- pnorm(z)
pva
pval
pva_TT <- 2 * pnorm(z)
pva_TT
pval_LT <- pnorm(z)
pval_TT <- 2 * pnorm(z)
#Uncomment this for several series
final_results <- main_script(series)
source('C:/Users/Dagoberto/Google Drive/Masters/IE MBD/Term 2/Forecasting Time Series/repo/Forecasting-Time-Series/1-Analyzing-Data/FTS_Test_Script.R', echo=TRUE)
setwd("C:/Users/Dagoberto/Google Drive/Masters/IE MBD/Term 2/Forecasting Time Series/repo/Forecasting-Time-Series/1-Analyzing-Data")
source('C:/Users/Dagoberto/Google Drive/Masters/IE MBD/Term 2/Forecasting Time Series/repo/Forecasting-Time-Series/1-Analyzing-Data/FTS_Test_Script.R', echo=TRUE)
source('C:/Users/Dagoberto/Google Drive/Masters/IE MBD/Term 2/Forecasting Time Series/repo/Forecasting-Time-Series/1-Analyzing-Data/FTS_Test_Script.R', echo=TRUE)
dev.off()
source('C:/Users/Dagoberto/Google Drive/Masters/IE MBD/Term 2/Forecasting Time Series/repo/Forecasting-Time-Series/1-Analyzing-Data/FTS_Test_Script.R', echo=TRUE)
y <- series1
z <- (mean(y) - 0) / ( sd(y) / sqrt(length(y)))
z
mean(y)
dev.off()
source('C:/Users/Dagoberto/Google Drive/Masters/IE MBD/Term 2/Forecasting Time Series/repo/Forecasting-Time-Series/1-Analyzing-Data/FTS_Test_Script.R', echo=TRUE)
a
lenght(y)
length(y)
debugSource('C:/Users/Dagoberto/Google Drive/Masters/IE MBD/Term 2/Forecasting Time Series/repo/Forecasting-Time-Series/1-Analyzing-Data/FTS_Test_Script.R', echo=TRUE)
debugSource('C:/Users/Dagoberto/Google Drive/Masters/IE MBD/Term 2/Forecasting Time Series/repo/Forecasting-Time-Series/1-Analyzing-Data/FTS_Test_Script.R', echo=TRUE)
debugSource('C:/Users/Dagoberto/Google Drive/Masters/IE MBD/Term 2/Forecasting Time Series/repo/Forecasting-Time-Series/1-Analyzing-Data/FTS_Test_Script.R', echo=TRUE)
y <- series6
box <- Box.test(y, lag = 20, type="Ljung")
print(paste("Box Test (p-value): ", box$p.value))
#Hyp Testing for Mean = 0
z <- (mean(y) - 0) / ( sd(y) / sqrt(length(y)))
alpha <- 0.05
z.half.alpha <- qnorm(1-alpha/2)
print(paste("Z-Statistic: ", z))
Box.test(y^2,lag=20, type="Ljung")
source('C:/Users/Dagoberto/Google Drive/Masters/IE MBD/Term 2/Forecasting Time Series/repo/Forecasting-Time-Series/1-Analyzing-Data/FTS_Test_Script.R', echo=TRUE)
source('C:/Users/Dagoberto/Google Drive/Masters/IE MBD/Term 2/Forecasting Time Series/repo/Forecasting-Time-Series/1-Analyzing-Data/FTS_Test_Script.R', echo=TRUE)
